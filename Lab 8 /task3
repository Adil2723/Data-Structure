#include <iostream>
#include <string>
using namespace std;

class Node {
public:
    string data;
    Node* left;
    Node* right;
    Node(string val) {
        data = val;
        left = right = nullptr;
    }
};

class BinaryTree {
private:
    Node* root;

    Node* insert(Node* node, string val) {
        if (!node) return new Node(val);
        char choice;
        cout << "Add " << val << " to the left (l) or right (r) of " << node->data << "? ";
        cin >> choice;
        if (choice == 'l' || choice == 'L') node->left = insert(node->left, val);
        else node->right = insert(node->right, val);
        return node;
    }

    bool isFull(Node* node) {
        if (!node) return true;
        if (!node->left && !node->right) return true;
        if (node->left && node->right)
            return isFull(node->left) && isFull(node->right);
        return false;
    }

public:
    BinaryTree() { root = nullptr; }

    void addNode(string val) {
        if (!root) root = new Node(val);
        else root = insert(root, val);
    }

    void checkFull() {
        if (!root) cout << "Tree is empty.\n";
        else if (isFull(root)) cout << "The tree is a full binary tree.\n";
        else cout << "The tree is NOT a full binary tree.\n";
    }
};

int main() {
    BinaryTree tree;
    int n;
    string val;
    cout << "Enter number of nodes: ";
    cin >> n;
    cin.ignore();
    for (int i = 0; i < n; i++) {
        cout << "Enter node value: ";
        getline(cin, val);
        tree.addNode(val);
    }
    tree.checkFull();
    return 0;
}

